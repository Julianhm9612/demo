#!/usr/bin/env php
<?php

declare(strict_types = 1);

namespace ServiceBusDemo\Bin;

use Amp\Loop;
use Desperado\ServiceBus\Application\Bootstrap;
use Desperado\ServiceBus\Application\ServiceBusKernel;
use Desperado\ServiceBus\Endpoint\ApplicationTransportEndpoint;
use Desperado\ServiceBus\Infrastructure\Transport\Implementation\Amqp\AmqpExchange;
use Desperado\ServiceBus\Infrastructure\Transport\Implementation\Amqp\AmqpQueue;
use Desperado\ServiceBus\Infrastructure\Transport\Implementation\Amqp\AmqpTransportLevelDestination;
use Desperado\ServiceBus\Infrastructure\Transport\QueueBind;
use Desperado\ServiceBus\Infrastructure\Storage\SQL\AmpPostgreSQL\AmpPostgreSQLAdapter;
use Desperado\ServiceBus\Infrastructure\Transport\TopicBind;
use Desperado\ServiceBus\Scheduler\Messages\Command\EmitSchedulerOperation;
use ServiceBusDemo\App\ServiceBusDemoExtension;
use ServiceBusDemo\App\Storage\StorageSchemaBuilder;

include __DIR__ . '/../vendor/autoload.php';

/**
 * @todo: wait-for-it
 *
 * Wait RabbitMQ
 */
sleep(8);

/** @var \Symfony\Component\DependencyInjection\Container $container */
$container = Bootstrap::withDotEnv(__DIR__ . '/../.env')
    ->useRabbitMqTransport(
        (string) \getenv('TRANSPORT_CONNECTION_DSN'),
        (string) \getenv('TRANSPORT_TOPIC'),
        (string) \getenv('TRANSPORT_ROUTING_KEY')
    )
    ->useSqlStorage(AmpPostgreSQLAdapter::class, (string) \getenv('DATABASE_CONNECTION_DSN'))
    ->useCustomCacheDirectory(__DIR__ . '/../cache')
    ->addExtensions(new ServiceBusDemoExtension())
    ->importParameters([
        'app.log_level' => (string) \getenv('LOG_LEVEL')
    ])
    ->enableAutoImportMessageHandlers([__DIR__ . '/../src'])
    ->enableAutoImportSagas([__DIR__ . '/../src'])
    ->enableScheduler()
    ->boot();

/** @var StorageSchemaBuilder $schemaBuilder */
$schemaBuilder = $container->get(StorageSchemaBuilder::class);

$kernel = new ServiceBusKernel($container);

Loop::run(
    static function() use ($kernel, $schemaBuilder): \Generator
    {
        $mainExchange = AmqpExchange::direct((string) \getenv('TRANSPORT_TOPIC'), true);
        $mainQueue = AmqpQueue::default((string) \getenv('TRANSPORT_QUEUE'), true);

        $transport = $kernel->transport();

        yield $transport->createQueue(
            $mainQueue,
            new QueueBind(
                $mainExchange,
                (string) \getenv('TRANSPORT_ROUTING_KEY'))
        );

        yield $transport->createTopic(
            AmqpExchange::delayed((string) \getenv('SCHEDULER_TOPIC')),
            new TopicBind(
                $mainExchange,
                \getenv('TRANSPORT_ROUTING_KEY')
            )
        );

        $kernel->registerMessageCustomEndpoint(
            EmitSchedulerOperation::class,
            new ApplicationTransportEndpoint(
                $transport,
                new AmqpTransportLevelDestination(
                    (string) \getenv('SCHEDULER_TOPIC'),
                    \getenv('TRANSPORT_ROUTING_KEY')
                )
            )
        );

        /** Init database schema */
        yield $schemaBuilder->buildSchema();

        $kernel
            ->enableGarbageCleaning()
            ->useDefaultStopSignalHandler(3);

        yield $kernel->entryPoint()->listen($mainQueue);
    }
);
